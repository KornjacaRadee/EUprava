version: "3.1"

services:
  auth_service:
    build:
      context: auth_service/
      dockerfile: Dockerfile
    restart: always
    container_name: "auth_service"
    hostname: "auth_service"
    ports:
      - 8082:8082
    environment:
      - PORT=8082
      - MONGO_DB_URI=mongodb://root:pass@auth_db:27017
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - network


  saobracajna_policija:
      build:
        context: saobracajna_policija/
        dockerfile: Dockerfile
      restart: always
      container_name: "saobracajna_policija"
      hostname: "saobracajna_policija"
      ports:
        - 8084:8084
      environment:
        - PORT=8084
        - SAOBRACAJNA_POLICIJA_DB_HOST=saobracajna_policija_db
        - SAOBRACAJNA_POLICIJA_DB_PORT=27017
        - SAOBRACAJNA_POLICIJA_DB_NAME=saobracajnaDB
      depends_on:
        saobracajna_policija_db:
          condition: service_healthy
      networks:
        - network

  auth_db:
    hostname: "auth_db"
    container_name: "auth_db"
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: authDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - auth_db:/data/db
    networks:
      - network

  saobracajna_policija_db:
    image: mongo
    container_name: saobracajna_policija_db
    restart: on-failure

    ports:
      - "27020:27017"

    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - network







volumes:
  auth_db:
  mong_express_data:

networks:
  network:
    driver: bridge